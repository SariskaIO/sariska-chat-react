[{"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/index.js":"1","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/reportWebVitals.js":"2","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/App.js":"3","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/socket/SocketProvider.js":"4","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/channel/CreateChannel.js":"5","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/channel/UseEventHandler.js":"6","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/messages/ChatWindow.js":"7","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/socket/SocketContext.js":"8","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/utils/index.js":"9","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/constants/index.js":"10","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/messages/MessageList.js":"11","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/messages/MessageItem.js":"12","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/assets/styles/colors.js":"13","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/messages/MediaChat/index.js":"14","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/config.js":"15","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/EmojiPickerContainer/index.js":"16","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/FileAttached/index.js":"17","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/FileUpload/index.js":"18","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Model/index.js":"19","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/InputWithEmoji/index.js":"20","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/InitiatePoll.js":"21","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/VotePoll/index.js":"22","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/VotePoll/RadioVote/index.js":"23","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/VotePoll/ProgressBar/index.js":"24","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/DrawerBoard/index.js":"25","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/ListBoard/index.js":"26","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/index.js":"27","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/reducers/index.js":"28","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/reducers/room.js":"29","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/reducers/user.js":"30","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/actions/types.js":"31","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/actions/room.js":"32","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/actions/user.js":"33","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/intialState/index.js":"34","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/views/Chat.js":"35","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Copyright/index.js":"36","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/views/CreateRoom.js":"37","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/BackdropLoader/index.js":"38","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/VotePoll/PollResult/index.js":"39"},{"size":588,"mtime":1689152217266,"results":"40","hashOfConfig":"41"},{"size":362,"mtime":1684344931359,"results":"42","hashOfConfig":"41"},{"size":799,"mtime":1689152217259,"results":"43","hashOfConfig":"41"},{"size":1307,"mtime":1689152217263,"results":"44","hashOfConfig":"41"},{"size":781,"mtime":1689152217259,"results":"45","hashOfConfig":"41"},{"size":574,"mtime":1689320976253,"results":"46","hashOfConfig":"41"},{"size":1111,"mtime":1689152217260,"results":"47","hashOfConfig":"41"},{"size":109,"mtime":1684344931359,"results":"48","hashOfConfig":"41"},{"size":7685,"mtime":1689152217266,"results":"49","hashOfConfig":"41"},{"size":430,"mtime":1689152217264,"results":"50","hashOfConfig":"41"},{"size":13132,"mtime":1689152217260,"results":"51","hashOfConfig":"41"},{"size":783,"mtime":1689152217260,"results":"52","hashOfConfig":"41"},{"size":2518,"mtime":1689152217259,"results":"53","hashOfConfig":"41"},{"size":1328,"mtime":1689152217260,"results":"54","hashOfConfig":"41"},{"size":786,"mtime":1689318906395,"results":"55","hashOfConfig":"41"},{"size":964,"mtime":1689152217261,"results":"56","hashOfConfig":"41"},{"size":3570,"mtime":1689152217261,"results":"57","hashOfConfig":"41"},{"size":3123,"mtime":1689152217262,"results":"58","hashOfConfig":"41"},{"size":2643,"mtime":1689152217262,"results":"59","hashOfConfig":"41"},{"size":916,"mtime":1685125492675,"results":"60","hashOfConfig":"61"},{"size":4430,"mtime":1689152217262,"results":"62","hashOfConfig":"41"},{"size":8580,"mtime":1689152217263,"results":"63","hashOfConfig":"41"},{"size":3411,"mtime":1689152217263,"results":"64","hashOfConfig":"41"},{"size":1191,"mtime":1689152217263,"results":"65","hashOfConfig":"41"},{"size":585,"mtime":1689152217261,"results":"66","hashOfConfig":"41"},{"size":1165,"mtime":1689152217262,"results":"67","hashOfConfig":"41"},{"size":565,"mtime":1689152217264,"results":"68","hashOfConfig":"41"},{"size":258,"mtime":1689152217265,"results":"69","hashOfConfig":"41"},{"size":908,"mtime":1689152217265,"results":"70","hashOfConfig":"41"},{"size":1029,"mtime":1689152217265,"results":"71","hashOfConfig":"41"},{"size":924,"mtime":1689152217264,"results":"72","hashOfConfig":"41"},{"size":339,"mtime":1689152217264,"results":"73","hashOfConfig":"41"},{"size":303,"mtime":1689152217264,"results":"74","hashOfConfig":"41"},{"size":265,"mtime":1689152217265,"results":"75","hashOfConfig":"41"},{"size":3634,"mtime":1689320969701,"results":"76","hashOfConfig":"41"},{"size":479,"mtime":1689152217261,"results":"77","hashOfConfig":"41"},{"size":4021,"mtime":1689152217266,"results":"78","hashOfConfig":"41"},{"size":912,"mtime":1689152217260,"results":"79","hashOfConfig":"41"},{"size":3539,"mtime":1689152217262,"results":"80","hashOfConfig":"41"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1ep2rrv",{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"83"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"83"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"83"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"83"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"83"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"83"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"83"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"y5txfx",{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"83"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"83"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"83"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"166","usedDeprecatedRules":"83"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"83"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/index.js",[],["172","173"],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/reportWebVitals.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/App.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/socket/SocketProvider.js",["174"],"import React, {useEffect, useState} from 'react'\nimport {Socket} from 'phoenix';\nimport SocketContext from './SocketContext';\nimport {getToken} from \"../../utils\";\nimport { WEB_SOCKET_URL } from '../../config';\n\nconst SocketProvider = ({children}) => {\n    const [socket, setSocket] = useState(null);\n    let userName = JSON.parse(localStorage.getItem(\"sariska-chat-userName\"));\n    let userId = JSON.parse(localStorage.getItem(\"sariska-chat-userId\"));\n    useEffect(() => {\n        const fetchData = async ()=> {\n            const token = await getToken( userName, userId );\n            localStorage.setItem(\"SARISKA_CHAT_TOKEN\", JSON.stringify(token));\n            const params = {token};\n            const s = new Socket(WEB_SOCKET_URL, {params});\n            s.onOpen( () => console.log(\"connection open!\") )\n            s.onError( (e) => console.log(\"there was an error with the connection!\", e) )\n            s.onClose( () => console.log(\"the connection dropped\") )\n            s.connect();\n            setSocket(s);\n        }\n        fetchData();\n        return () => {\n            socket && socket.disconnect();\n        }\n    }, [userName]);\n\n    return (\n        <SocketContext.Provider value={socket}>\n            {children}\n        </SocketContext.Provider>\n    )\n}\n\nexport default SocketProvider","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/channel/CreateChannel.js",["175","176"],"import { useContext, useEffect, useRef, useState } from 'react'\nimport SocketContext from '../socket/SocketContext'\n\nconst CreateChannel = (topic, params={}, onJoin) => {\n    const socket = useContext(SocketContext);\n    const [channel, setChannel] = useState(null);\n    useEffect(()=>{\n        if(socket===null){\n            return;\n        }\n        const ch = socket.channel(topic, params);\n        ch.join()\n            .receive('ignore', () => console.log('Access denied.'))\n            .receive('ok', () => console.log('Access granted.'))\n            .receive('timeout', () => console.log('Timeout.'));\n        setChannel(ch);\n        return () => {\n            ch && ch.leave();\n        }\n    }, [socket])\n    return (\n        channel\n    )\n}\n\nexport default CreateChannel;\n","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/channel/UseEventHandler.js",["177"],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/messages/ChatWindow.js",["178","179","180","181","182","183","184","185"],"import React from 'react'\nimport MessageItem from \"./MessageItem\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { COMPANY_LOGO } from '../../constants';\nimport MessageList from './MessageList';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      textAlign: 'left'\n    },\n  }));\n\nconst ChatWindow = ({messages, pushMessage, loading, pushVote, newVotes, messageId}) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <MessageList messages={messages} pushMessage={pushMessage} loading={loading} pushVote={pushVote} newVotes={newVotes} messageId={messageId} />\n        </div>\n    )\n}\n\n\nexport default ChatWindow;\n","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/socket/SocketContext.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/utils/index.js",["186"],"import { MESSAGING_API_SERVICE_HOST, SARISKA_API_KEY } from \"../config\";\nimport {GENERATE_TOKEN_URL, GET_PRESIGNED_URL} from \"../constants\";\nimport linkifyHtml from 'linkify-html';\n\nconst Compressor = require('compressorjs');\n\nexport function getUserId() {\n    const characters ='abcdefghijklmnopqrstuvwxyz';\n    function generateString(length) {\n        let result = ' ';\n        const charactersLength = characters.length;\n        for ( let i = 0; i < length; i++ ) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    }\n    const str = generateString(9).trim()\n    const strArr = str.match(/.{3}/g);\n    return strArr.join(\"-\");\n}\n\nexport const getToken = async (username, userId)=> {\n    const body = {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            apiKey: `${SARISKA_API_KEY}`, // enter your app secret,\n            user: {\n                id: userId,\n                name: username\n            },\n        })\n    };\n\n    try {\n        const response = await fetch(GENERATE_TOKEN_URL, body);\n        if (response.ok) {\n            const json = await response.json();\n            return json.token;\n        } else {\n            console.log(response.status);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n\n}\n\n\nexport function getPresignedUrl(params) {\n    return new Promise((resolve, reject) => {\n        const body = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${JSON.parse(localStorage.getItem(\"SARISKA_CHAT_TOKEN\"))}`\n            },\n            body: JSON.stringify({\n                fileType: params.fileType,\n                fileName: params.fileName\n            })\n        };\n\n        fetch(GET_PRESIGNED_URL, body)\n            .then((response) => {\n                if (response.ok) {\n                    return response.json(); //then consume it again, the error happens\n                }\n            })\n            .then(function (response) {\n                resolve(response);\n            }).catch((error) => {\n                console.log(error);\n            reject(error)\n        })\n    });\n}\n\nexport function formatBytes(bytes) {\n    var marker = 1024; // Change to 1000 if required\n    var decimal = 3; // Change as required\n    var kiloBytes = marker; // One Kilobyte is 1024 bytes\n    var megaBytes = marker * marker; // One MB is 1024 KB\n    var gigaBytes = marker * marker * marker; // One GB is 1024 MB\n    var teraBytes = marker * marker * marker * marker; // One TB is 1024 GB\n\n    // return bytes if less than a KB\n    if (bytes < kiloBytes) return bytes + \" Bytes\";\n    // return KB if less than a MB\n    else if (bytes < megaBytes) return (bytes / kiloBytes).toFixed(decimal) + \" KB\";\n    // return MB if less than a GB\n    else if (bytes < gigaBytes) return (bytes / megaBytes).toFixed(decimal) + \" MB\";\n    // return GB if less than a TB\n    else return (bytes / gigaBytes).toFixed(decimal) + \" GB\";\n}\n\n\nexport function compressFile(file, type) {\n    return new Promise((resolve, reject) => {\n        if (type === \"attachment\") {\n            resolve(file);\n        } else {\n            new Compressor(file, {\n                quality: 0.6,\n                success(result) {\n                    resolve(result);\n                },\n                error(err) {\n                    reject(err.message);\n                }\n            });\n        }\n    });\n}\n\nexport function getUniqueNumber() {\n    return Math.floor(100000 + Math.random() * 900000);\n}\n\n\nexport const linkify=(inputText) =>{\n    const options = { defaultProtocol: 'https',   target: '_blank'};\n    return linkifyHtml(inputText, options);\n}\n\nexport function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\nexport const getIntialUpperCaseString = (string) => {\n    if(string){\n        return string.slice(0,1).toUpperCase()\n    }else{\n        return ''\n    };\n}\n\nexport const renderAction = (type, payload) => {\n    if(payload){\n        return {\n            type,\n            payload\n        }\n    }else{\n        return {\n            type\n        }\n    }\n}\n\nexport async function apiCall(path, method, body = {}, headers = {}, loader=false) {\n    let url = `${MESSAGING_API_SERVICE_HOST}${path}`;\n    const requestHeaders = {\n        \"Content-Type\": \"application/json\", \n        \"Authorization\": `Bearer ${\n            JSON.parse(localStorage.getItem(\"SARISKA_CHAT_TOKEN\"))\n        }`,\n        ...headers\n    };\n    if (method.toUpperCase() === \"GET\" && Object.keys(body).length) {\n        const queryString = new URLSearchParams(body).toString();\n        url = `${url}?${queryString}`;\n    }\n    \n    const payload = {\n        method,\n        headers: requestHeaders,\n    };\n    if (method.toUpperCase() !== \"GET\" && method.toUpperCase() !== \"HEAD\") {\n        payload.body = JSON.stringify(body);\n    }\n  \n    try {\n        const response = await fetch(url, payload);\n        if (response.status === 401) {\n            console.log('not authenticated');\n        }\n  \n        if (response.status === 403 && method.toUpperCase() !== \"GET\") {\n            console.log('not autherized');\n        }\n  \n        if (response.status === 204) {\n            return {};\n        }\n        if (response.ok) {\n            return await response.json();\n        }\n        return {\n            httpStatus: response.status,\n            statusText: response.statusText,\n            body: await response.json(),\n        };\n    } catch (error) {\n        return {error, httpStatus: 500};\n    }\n  }\n\n  export const isEmptyObject = (obj) => {\n    if(typeof obj !== 'object' ) return false;\n    return Object.keys(obj).length === 0;\n  };\n\n//   export const pushMessage = (message, options, type, user, setMessages, chatChannel)=>{\n     \n//       const new_message =  {\n//         content: message, \n//         content_type: type, \n//         created_by_name: user.name,  \n//         options: options,\n//         x: \"uu\", \n//         y: { x: \"ghhg\"}\n//       };\n//       setMessages(messages => [...messages, new_message]);\n//       chatChannel.push('new_message', new_message);\n//   };\n//   export const pushOptions = (option, type, setMessages, chatChannel)=>{\n//     const new_option =  {\n//       option: option,\n//       contentType: type\n//     };\n//     setMessages(messages => [...messages, new_option]);\n//     chatChannel.push('new_option', new_message);\n// };\n  \n  export const adjustTextMessage = (text) => {\n    return text.trim();\n  };\n  \n  export const isMessageEmpty = (text, fileAttached) => {\n    let textLength = adjustTextMessage(text).length;\n    let fileLength = fileAttached.length;\n    if (\n      (!textLength && fileLength) ||\n      (textLength && !fileLength) ||\n      (textLength && fileLength)\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  export const hasDuplicates = (array) => {\n    return new Set(array).size !== array.length;\n  }\n\n  export const getMaxInArray = (arr) => {\n    if(!arr?.length) return 0;\n    else return Math.max(...arr);\n  }\n\n  export const getSingularOrPlural = (num, text) => {\n    return num > 1 ? text + 's' : text;\n  }\n\n  export const convertTimestamptoLocalDateTime = (timestamp) => {\n    const datetime = new Date(timestamp);\n    let time = datetime.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\", hour12: true });\n    let date = datetime.toDateString();\n    return date +' '+time;\n  }","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/constants/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/messages/MessageList.js",["187","188"],"import React, { useEffect, useRef, useState } from \"react\";\nimport MessageItem from \"./MessageItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Grid,\n  TextField,\n  Tooltip,\n  Zoom,\n} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { colors } from \"../../assets/styles/colors\";\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\";\nimport PollOutlinedIcon from \"@material-ui/icons/PollOutlined\";\nimport { AvatarGroup } from \"@material-ui/lab\";\nimport FileAttached from \"../shared/FileAttached\";\nimport MediaChat from \"./MediaChat\";\nimport EmojiPickerContainer from \"../shared/EmojiPickerContainer\";\nimport Model from \"../shared/Model\";\nimport VotePoll from \"../shared/Poll/VotePoll\";\nimport { useStore } from \"../../context\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getRandomColor, hasDuplicates, isMessageEmpty } from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100vh\",\n    backgroundColor: `${colors.gray}`,\n  },\n  card: {\n    flex: 1,\n    width: \"100%\",\n    margin: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"60vh\",\n    background: colors.white1,\n  },\n  cardHeader: {\n    backgroundColor: `${colors.primaryLight}`,\n  },\n  avatarList: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  arrow: {\n    \"&: hover\": {\n      opacity: \"0.9\",\n      cursor: \"pointer\",\n    },\n  },\n  cardContent: {\n    flex: 1,\n    height: \"200px\",\n    overflow: \"auto\",\n    padding: \"16px 73px\",\n    [theme.breakpoints.down(\"md\")]: {\n      padding: \"16px\",\n    },\n  },\n  cardAction: {\n    boxShadow: \"0px 4px 4px 2px rgba(0,0,0,0.8)\",\n    zIndex: \"9\",\n  },\n  cardForm: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    width: \"100%\",\n  },\n  cardTextField: {\n    width: \"100%\",\n    padding: \"2px\",\n  },\n  enterText: {\n    backgroundColor: `${colors.primaryLight}`,\n    \"&:hover\": {\n      opacity: \"0.8\",\n      cursor: \"pointer\",\n    },\n  },\n  box: {\n    textAlign: \"left\",\n  },\n\n  chatLine: {\n    display: \"flex\",\n    //alignItems: 'center',\n    marginBottom: \"16px\",\n  },\n  text: {\n    background: `${colors.gray}`,\n    width: \"fit-content\",\n    padding: \"5px\",\n    borderRadius: \"0px 5px 10px\",\n    marginBottom: \"10px\",\n    maxWidth: \"70%\",\n    marginLeft: \"10px\",\n  },\n  userAvatar: {\n    height: \"24px\",\n    width: \"24px\",\n    fontSize: \"1rem\",\n    backgroundColor: `${getRandomColor()}`,\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(0.5),\n  },\n  userAvatar1: {\n    height: \"26px\",\n    width: \"26px\",\n    backgroundColor: `${colors.white}`,\n    color: `${colors.blue}`,\n  },\n  customWidth: {\n    maxWidth: 100,\n    color: \"#fff\",\n    backgroundColor: \"#000\",\n    fontWeight: 700,\n    fontSize: \"110%\",\n  },\n  poll: {\n    color: colors.lightgray1,\n    marginBottom: \"-2px\",\n    marginRight: \"-3px\",\n    \"&:hover\": {\n      color: colors.primaryLight,\n    },\n  },\n}));\n\nconst initialState = {\n  poll: {\n    question: \" \",\n    options: [\"\", \"\"],\n    error: \"\",\n  }\n};\n\nconst MessageList = ({\n  messages,\n  pushMessage,\n  loading,\n  pushVote,\n  newVotes,\n  messageId\n}) => {\n  const classes = useStyles();\n  const [text, setText] = useState(\"\");\n  //const [chat, setChat] = useState(\"\");\n  const [isPickerVisible, setIsPickerVisible] = useState(false);\n  let [fileAttached, setFileAttached] = useState([]);\n  const [openPoll, setOpenPoll] = React.useState(false);\n  const [poll, setPoll] = useState(initialState.poll);\n  const [counter, setCounter] = useState(initialState.counter);\n  const navigate = useNavigate();\n  const {\n    users: { user },\n    rooms: { room },\n  } = useStore();\n\n  const handleChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const handleEmojiPicker = () => {\n    setIsPickerVisible(!isPickerVisible);\n  };\n\n  const handleEmojiClick = (emojiData, event) => {\n    setText(text + emojiData.emoji);\n    setIsPickerVisible(!isPickerVisible);\n  };\n\n  const startFileUpload = (fileData) => {\n    const index = fileAttached.findIndex((item) => fileData.id === item.id);\n\n    if (index >= 0) {\n      const item = fileAttached[index];\n      item.status = fileData.status;\n      item.url = fileData.url;\n      fileAttached[index] = item;\n    } else {\n      setFileAttached([...fileAttached, fileData]);\n    }\n  };\n\n  const removeAttachment = (id) => {\n    setFileAttached(fileAttached.filter((file) => file.id !== id));\n  };\n\n  const handleOpenPoll = () => {\n    setOpenPoll(true);\n  };\n\n  const handleChangePoll = (e, index, optValue) => {\n    if (e.target.name === \"question\") {\n      setPoll((poll) => ({ ...poll, question: e.target.value }));\n    } else {\n      const updatedPollOptions = [...poll.options];\n      updatedPollOptions[index] = optValue;\n      setPoll((poll) => ({\n        ...poll,\n        options: updatedPollOptions,\n      }));\n    }\n  };\n\n  const disableButton = isMessageEmpty(text, fileAttached);\n\n  const handleClosePoll = (e) => {\n    e.preventDefault();\n    setPoll(initialState.poll);\n    setOpenPoll(false);\n  };\n\n  const handleSubmitPoll = (e) => {\n    e.preventDefault();\n    setPoll((poll) => ({ ...poll, error: `` }));\n    if (!poll.question || poll.question.trim() === \"\") {\n      setPoll((poll) => ({\n        ...poll,\n        error: \"Poll Question can't be kept blank\",\n      }));\n      return;\n    }\n    for (let opt of poll.options) {\n      let index = poll.options.indexOf(opt);\n      if (!opt) {\n        setPoll((poll) => ({\n          ...poll,\n          error: `Poll Option ${index + 1} can't be kept blank`,\n        }));\n        break;\n      }\n    }\n\n    if (hasDuplicates(poll.options)) {\n      setPoll((poll) => ({\n        ...poll,\n        error: `Poll can't have duplicate options`,\n      }));\n    }\n\n    if (poll.error) {\n      return;\n    }\n    //setPoll((poll) => ({ ...poll, question: poll.question.trim() }));\n    let trimmedPoll = {...poll, question: poll.question.trim()};\n    pushMessage(trimmedPoll, \"poll\");\n\n    if (!disableButton) {\n      setPoll(initialState.poll);\n    }\n    setOpenPoll(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (fileAttached.find((item) => item.status === \"loading\")) {\n      return;\n    }\n    if (!disableButton) {\n      if (text) {\n        pushMessage(text);\n      }\n      if (fileAttached.length) {\n        fileAttached.map((item) => {\n          if (item.status === \"done\") {\n            pushMessage(item.url);\n          }\n        });\n      }\n    }\n    setText(\"\");\n    setFileAttached([]);\n    //setChat((chat) => [...chat, text]);\n  };\n\n  useEffect(() => {\n    //const userDetails = JSON.parse(localStorage.getItem(\"user\"));\n    //const roomDetails = JSON.parse(localStorage.getItem(\"room\"));\n    //setUser(userDetails);\n    //setRoom(roomDetails);\n    scrollToBottom();\n  }, []);\n\n  const scrollRef = useRef(null);\n  const scrollToBottom = () => {\n    scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [text]);\n\n  const goBack = () => navigate(\"/\");\n\n  return (\n    <div className={classes.root}>\n      <Card className={classes.card}>\n        <CardHeader\n          avatar={\n            <div className={classes.avatarList}>\n              <Tooltip\n                TransitionComponent={Zoom}\n                title={user.name}\n                arrow\n                classes={{ tooltip: classes.customWidth }}\n              >\n                <AvatarGroup max={2}></AvatarGroup>\n              </Tooltip>\n            </div>\n          }\n          // action={\n          //   <IconButton aria-label=\"settings\">\n          //     <MoreVertIcon />\n          //   </IconButton>\n          // }\n          title={\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                color: colors.white,\n              }}\n            >\n              <ArrowBackIcon onClick={goBack} className={classes.arrow} />\n              <div style={{ fontWeight: 900, fontSize: \"1.2rem\" }}>\n                <span>Room Name : </span>\n                {!loading ? (\n                  <span style={{ color: colors.searchFocus }}>\n                    {room?.session_id}\n                  </span>\n                ) : null}\n              </div>\n              <div style={{ fontWeight: 900, fontSize: \"1.2rem\" }}>\n                <span> User : </span>\n                {!loading ? (\n                  <span style={{ color: colors.searchFocus }}>\n                    {user?.name}\n                  </span>\n                ) : null}\n              </div>\n            </div>\n          }\n          className={classes.cardHeader}\n        />\n        <CardContent className={classes.cardContent}>\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"p\"\n          ></Typography>\n          <Box className={classes.box}>\n            {messages.map((message, id) => (\n              <Box className={classes.chatLine} key={message.id}>\n                <Avatar aria-label=\"user\" className={classes.userAvatar}>\n                  {message.created_by_name?.toUpperCase().slice(0, 1)}\n                </Avatar>\n\n                {\n                  message.content_type === \"poll\" ? (\n                    <VotePoll\n                      username={message?.created_by_name}\n                      poll={message}\n                      counter={counter}\n                      pushVote={pushVote}\n                      newVotes={newVotes}\n                      messageId={messageId}\n                    />\n                  ) : (\n                    <MessageItem message={message} id={id} user={user} />\n                  )\n                }\n              </Box>\n            ))}\n          </Box>\n          <Typography ref={scrollRef} style={{ height: \"18px\" }}></Typography>\n        </CardContent>\n        {fileAttached.length > 0 && (\n          <Box className={classes.cb__chatWrapper__attachements}>\n            {fileAttached.map((file, index) => (\n              <FileAttached\n                key={index}\n                fileData={file}\n                removeAttachment={removeAttachment}\n              />\n            ))}\n          </Box>\n        )}\n        <CardActions disableSpacing className={classes.cardAction}>\n          {\n            <MediaChat\n              startFileUpload={startFileUpload}\n              currentMessage={text}\n            />\n          }\n          <form\n            noValidate\n            autoComplete=\"off\"\n            className={classes.cardForm}\n            onSubmit={handleSubmit}\n          >\n            <Grid\n              container\n              spacing={1}\n              alignItems=\"flex-end\"\n              style={{ width: \"100%\", alignItems: \"center\" }}\n            >\n              <Grid item>\n                <Button\n                  style={{\n                    padding: \"2px\",\n                    borderRadius: \"50%\",\n                    minWidth: \"50%\",\n                  }}\n                  onClick={handleOpenPoll}\n                >\n                  <Tooltip title=\"Poll\" placement=\"top\">\n                    <PollOutlinedIcon className={classes.poll} />\n                  </Tooltip>\n                </Button>\n              </Grid>\n              <Model\n                open={openPoll}\n                poll={poll}\n                setPoll={setPoll}\n                handleChange={handleChangePoll}\n                handleClose={handleClosePoll}\n                handleSubmit={handleSubmitPoll}\n              />\n              <Grid item>\n                <EmojiPickerContainer\n                  handleEmojiClick={handleEmojiClick}\n                  handleEmojiPicker={handleEmojiPicker}\n                  isVisible={isPickerVisible}\n                  position={\"absolute\"}\n                  left={\"60px\"}\n                  bottom={\"75px\"}\n                  emojiStyle={\"apple\"}\n                  showPreview={false}\n                  height={350}\n                />\n              </Grid>\n              <Grid item style={{ flex: 1 }}>\n                <TextField\n                  id=\"text\"\n                  label=\"Enter Text Here\"\n                  variant=\"outlined\"\n                  className={classes.cardTextField}\n                  onChange={handleChange}\n                  value={text}\n                />\n              </Grid>\n              <Grid item>\n                <Avatar\n                  className={classes.enterText}\n                  onClick={handleSubmit}\n                  disabled={disableButton}\n                >\n                  <DoneAllIcon />\n                </Avatar>\n              </Grid>\n            </Grid>\n          </form>\n        </CardActions>\n      </Card>\n      {/* {messages.map((message, id) => <MessageItem message={message} key={id}/>)} */}\n    </div>\n  );\n};\n\nexport default MessageList;\n","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/messages/MessageItem.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/assets/styles/colors.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/messages/MediaChat/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/config.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/EmojiPickerContainer/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/FileAttached/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/FileUpload/index.js",["189"],"import React from 'react';\nimport {compressFile, getPresignedUrl, getUniqueNumber} from '../../../utils';\nimport InsertPhotoOutlinedIcon from '@material-ui/icons/InsertPhotoOutlined';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport { makeStyles, Tooltip } from '@material-ui/core';\nimport { colors } from '../../../assets/styles/colors';\n\n\nconst useStyles = makeStyles((theme) => ({\n    labelHover: {\n        '&:hover svg': {\n            color:colors.primaryLight,\n            cursor: 'pointer'\n        }\n    },\n    photo: {\n        //marginBottom: '-4px',\n        //padding: '3px',\n        color: colors.lightgray1,\n    },\n    attach: {\n        fontSize: '1.3rem', \n        //marginBottom: '-4px',\n        //padding: '3px',\n        transform: 'rotate(30deg)',\n        color: colors.lightgray1,\n        marginRight: '6px'\n    }\n}))\n\n\nconst FileUpload = ({ type, startFileUpload}) => {\n    const classes = useStyles();\n  const handleChange = (event) => {\n    const id = getUniqueNumber();\n    const file = event.target.files[0];\n    \n    const compressOptions = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1920,\n      useWebWorker: true\n    }\n    const signedUrlOptions = {\n        fileName: file.name,\n        fileType: file.type\n    }\n    \n    startFileUpload({id, name: file.name, type: type, size: file.size, status: 'loading'});\n    Promise.all([\n        getPresignedUrl(signedUrlOptions),\n        compressFile(file, type)\n     ])\n     .then(values => {\n        const signedUrl  = values[0].presignedUrl;\n        const headers = {\n          \"ACL\":\"public-read\",\n          \"Content-Disposition\": \"attachment\"\n        }\n        return fetch(signedUrl, {method: 'PUT', body: values[1], headers})\n    })\n    .then(res=>{\n        const url = res.url.split(\"?\")[0];\n        startFileUpload({id, name: file.name, type: type, size: file.size, url, status: 'done'});\n    })\n    .catch(function (error) {\n        startFileUpload({id, msg:'failed', status: 'failed'});\n    });\n  }\n\n\n  return (\n    <div>\n        {type===\"photos\" ? (\n            <Tooltip title=\"Add Image\" placement='top'>\n                <label htmlFor=\"chat-images\" className={classes.labelHover}>\n                    <InsertPhotoOutlinedIcon className={classes.photo}/>\n                    <input \n                        accept='image/*'\n                        name='file'\n                        type='file'\n                        onChange={handleChange}\n                        id=\"chat-images\"\n                        hidden\n                    />\n                </label>\n            </Tooltip>\n        )\n        : (\n        <Tooltip title=\"Add File\" placement='top'>\n            <label htmlFor=\"chat-fileAttached\" className={classes.labelHover}>\n                <AttachFileIcon className={classes.attach} />\n                <input \n                    name='file'\n                    type='file'\n                    onChange={handleChange}\n                    id=\"chat-fileAttached\"\n                    hidden\n                />\n            </label>\n        </Tooltip>\n        )\n        }\n    </div>\n  )\n}\n\nexport default FileUpload","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Model/index.js",["190"],"import React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { colors } from '../../../assets/styles/colors';\nimport InitiatePoll from '../Poll/InitiatePoll';\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    background: colors.primaryLight\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\" style={{fontWeight: 900, color: colors.white}}>{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon style={{fontWeight: 900, color: colors.white}} />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function Model({open, poll, setPoll, handleChange, handleClose, handleSubmit}) {\n  return (\n    <div>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} maxWidth={'sm'} fullWidth={true} >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} >\n          Create Poll\n        </DialogTitle>\n        <DialogContent dividers>\n        <InitiatePoll\n          poll={poll}\n          setPoll={setPoll}\n          handleChange={handleChange}\n        />\n        </DialogContent>\n        <DialogActions style={{justifyContent: 'space-between', padding: '8px 16px 8px 24px'}}>\n          <Typography style={{color: \"red\"}} >{poll.error}</Typography>\n          <Button autoFocus onClick={handleSubmit} color=\"primary\" variant='contained' style={{textTransform: 'initial'}}>\n            Poll Now\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/InputWithEmoji/index.js",["191","192","193"],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/InitiatePoll.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/VotePoll/index.js",["194","195","196","197","198","199"],"import {\n  Box,\n  Button,\n  Card,\n  Divider,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport { colors } from \"../../../../assets/styles/colors\";\nimport RadioVote from \"./RadioVote\";\nimport DrawerBoard from \"../../DrawerBoard\";\nimport { apiCall, getMaxInArray, getRandomColor, isEmptyObject } from \"../../../../utils\";\nimport PollResult from \"./PollResult\";\nimport { useStore } from \"../../../../context\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: colors.white,\n    width: \"fit-content\",\n    padding: \"16px\",\n    borderRadius: \"0px 8px 8px 8px\",\n    minWidth: \"300px\",\n    maxWidth: '360px'\n    //marginBottom: '16px',\n  },\n  username: {\n    color: getRandomColor(),\n    fontSize: \"1rem\",\n    marginBottom: \"8px\",\n    fontWeight: 600,\n    textTransform: \"capitalize\",\n  },\n  ques: {\n    fontSize: \"1.2rem\",\n    fontWeight: \"600\",\n    marginBottom: \"0.5rem\",\n  },\n  instruction: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: \".8rem\",\n  },\n  button: {\n    textTransform: \"initial\",\n    paddingTop: \"12px\",\n    padding: 0,\n    color: colors.primary,\n    \"&:hover\": {\n      background: \"transparent\",\n    },\n  },\n  list: {\n    width: 450,\n    background: colors.backgroundMix,\n  },\n  fullList: {\n    width: \"auto\",\n  },\n  closeButton: {\n    textTransform: \"initial\",\n    padding: 0,\n    color: colors.primary,\n    minWidth: \"auto\",\n    \"&:hover\": {\n      background: \"transparent\",\n    },\n  },\n  close: {\n    color: colors.gray,\n    marginRight: \"24px\",\n    fontWeight: \"900\",\n    fontSize: \"1.7rem\",\n  },\n  card: {\n    boxShadow: \"none\",\n    borderRadius: 0,\n    marginBottom: \"12px\",\n  },\n  counterButton: {\n    fontSize: \"0.75rem\",\n    textTransform: \"initial\",\n    background: colors.gray3,\n    padding: \"0 8px\",\n    height: \"21px\",\n  },\n  maxCounterButton: {\n    fontSize: \"0.75rem\",\n    textTransform: \"initial\",\n    color: colors.primary,\n    background: colors.altBack,\n    padding: \"0 8px\",\n    height: \"21px\",\n  },\n}));\n\nconst VotePoll = ({ username, poll, pushVote, newVotes, messageId}) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = React.useState(null);\n  const [isVoted, setIsVoted] = useState({\n    status: false,\n    answer: null,\n  });\n  const [votes, setVotes] = useState([]);\n  const [votedTable, setVotedTable] = useState([]);\n  const [maxVotes, setMaxVotes] = useState(null);\n\n  const {\n    users: { user },\n    rooms: { room },\n  } = useStore();\n\n  const getUser = async (id) => {\n    let path = `/rooms/${room.session_id}/users/${id}`;\n    try {\n      const response = await apiCall(path, \"GET\");\n      if (response?.user) {\n        return response.user;\n      } else {\n        return {};\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // const getUsers = async () => {\n  //   let path = `/rooms/${room.session_id}/users`;\n  //   try {\n  //     const response = await apiCall(path, \"GET\");\n  //     if (response?.users) {\n  //       return response.users;\n  //     } else {\n  //       return [];\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  const fetchTotalVotes = async ( channel_id, message_id) => {\n    let path = `/rooms/${room.session_id}/messages/${poll.id}/poll/votes`;\n    try {\n      const response = await apiCall(path, \"GET\");\n      if(response.status === 200){\n        setVotes(response.votes);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  \n  const checkIsVoted = async () => {\n    let path = `/rooms/${room.session_id}/messages/${poll.id}/poll/is_voted`;\n    try {\n      const response = await apiCall(path, \"GET\");\n      if (response.is_voted) {\n        setIsVoted((isVoted) => ({\n          ...isVoted,\n          status: true,\n          answer: response.is_voted?.answer,\n        }));\n      } else {\n        setIsVoted((isVoted) => ({\n          ...isVoted,\n          status: false,\n          answer: response.is_voted?.answer,\n        }));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const votePollOption = async (e) => {\n    let poll_option_id = parseInt(e.target.value);\n    let path = `/rooms/${room.session_id}/messages/${poll.id}/poll/${poll_option_id}`;\n    try {\n      const response = await apiCall(`${path}`, \"POST\");\n      let content= {\n        message_id: poll.id,\n        answer: poll_option_id\n      }\n      pushVote(content);\n      if(response && response?.status === 200){\n        await fetchTotalVotes(room.session_id, poll.id);\n        await checkIsVoted();\n      }\n    } catch (error) {\n      console.log(\"err\", error);\n    }\n  };\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n    votePollOption(event);\n  };\n\n  //let temp1= [[60, 'op1'],[61, 'op2'], [62, 'op3']];\n  let temp1 = poll.options;\n  const getVotedTable = async () => {\n    let temp = [...temp1];\n    let result = await Promise.all(\n      temp.map(async (item) => {\n        let counter = 0;\n        let userIds = [];\n        if (votes && votes.length) {\n          for (const vote of votes) {\n            if (parseInt(item[0]) === vote.answer) {\n              counter++;\n              if (vote.user_id) {\n                const userName = await getUser(vote.user_id);\n                if (isEmptyObject(userName)) {\n                  userIds = [...userIds];\n                } else {\n                  userIds.push({\n                    id: vote.user_id,\n                    name: JSON.parse(userName)?.created_by_name,\n                    updated_at: vote.updated_at,\n                  });\n                }\n              }\n            }\n          }\n        }else{\n          item = [...item, 0]\n        }\n        item = [...item, counter];\n        item = [...item, userIds];\n        return item;\n      })\n    );\n    setVotedTable(result);\n  };\n\n  useEffect(() => {\n    const getData = async() => {\n       await checkIsVoted();\n       await fetchTotalVotes(room.session_id, poll.id)\n    }\n    getData();\n  }, []);\n\n  useEffect(() => {\n    const getData = async() => {\n        await checkIsVoted();\n        await fetchTotalVotes(room.session_id, poll.id);\n    }\n    getData();\n  }, [value]);\n\n  useEffect(() => {\n    async function getTable() {\n      await getVotedTable();\n    }\n    getTable();\n  }, [value, votes]);\n\n  useEffect(()=>{\n    if(messageId === poll.id){\n      setVotes([...newVotes])\n    }\n  },[newVotes])\n\n  const toggleDrawer = (open) => (event) => {\n    if (\n      event &&\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setOpen(open);\n  };\n\n  useEffect(() => {\n    if (votedTable?.length > 0) {\n      const votesForOptions = votedTable.map((vote) => vote[2]);\n\n      const temp = getMaxInArray([...votesForOptions]);\n      setMaxVotes(temp);\n    }\n  }, [votedTable]);\n\n  const drawerContent = () => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(false)}\n      onKeyDown={toggleDrawer(false)}\n    >\n      <PollResult\n        toggleDrawer={toggleDrawer}\n        poll={poll}\n        votes={votes}\n        votedTable={votedTable}\n        maxVotes={maxVotes}\n      />\n    </div>\n  );\n\n  return (\n    <Box className={classes.root}>\n      <Typography variant=\"h5\" className={classes.username}>\n        {username}\n      </Typography>\n      <Typography variant=\"h5\" className={classes.ques}>\n        {poll.content}\n      </Typography>\n      <Box className={classes.instruction}>\n        <CheckCircleIcon style={{ fontSize: \"0.8rem\", color: colors.gray }} />\n        <Typography\n          style={{\n            fontSize: \"0.7rem\",\n            color: colors.gray,\n            marginLeft: \"0.4rem\",\n          }}\n        >\n          Select one\n        </Typography>\n      </Box>\n      <Box mb={2}>\n        <RadioVote\n          poll={poll}\n          isVoted={isVoted}\n          value={value}\n          votes={votes}\n          votedTable={votedTable}\n          handleChange={handleChange}\n          maxVotes={maxVotes}\n        />\n      </Box>\n      <Divider />\n      <Box sx={{ textAlign: \"center\" }}>\n        <Button\n          className={classes.button}\n          onClick={toggleDrawer(true)}\n          disableRipple\n          //disabled={votes?.length<1}\n        >\n          View votes\n        </Button>\n      </Box>\n      <DrawerBoard\n        toggleDrawer={toggleDrawer}\n        open={open}\n        content={drawerContent}\n      />\n    </Box>\n  );\n};\n\nexport default VotePoll;\n","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/VotePoll/RadioVote/index.js",["200","201","202","203","204"],"import { Box, FormControl, FormControlLabel, Radio, RadioGroup, Typography, makeStyles } from '@material-ui/core'\nimport clsx from 'clsx';\nimport React, { useEffect, useState } from 'react'\nimport { colors } from '../../../../../assets/styles/colors';\nimport ProgressBar from '../ProgressBar';\nimport { useStore } from '../../../../../context';\nimport { apiCall } from '../../../../../utils';\n\nconst useStyles = makeStyles({\n    root: {\n      '&:hover': {\n        backgroundColor: 'transparent',\n      },\n    },\n    fieldset: {\n        width: '100%',\n    },\n    radioGroup: {\n        '& .MuiFormControlLabel-root': {\n            width: '100%',\n            marginBottom: '16px'\n        },\n        '& .MuiTypography-root.MuiFormControlLabel-label': {\n            fontSize: '0.8rem',\n            width: '100%'\n        }\n    },\n    icon: {\n      borderRadius: '50%',\n      width: 16,\n      height: 16,\n      boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n      backgroundColor: '#f5f8fa',\n      backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n      '$root.Mui-focusVisible &': {\n        outline: `2px auto ${colors.pricing}`,\n        outlineOffset: 2,\n      },\n      'input:hover ~ &': {\n        backgroundColor: '#ebf1f5',\n      },\n      'input:disabled ~ &': {\n        boxShadow: 'none',\n        background: 'rgba(206,217,224,.5)',\n      },\n    },\n    checkedIcon: {\n      backgroundColor: colors.primaryLight,\n      backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\n      '&:before': {\n        display: 'block',\n        width: 16,\n        height: 16,\n        backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\n        content: '\"\"',\n      },\n      'input:hover ~ &': {\n        backgroundColor: colors.primary,\n      },\n    },\n  });\n\n  function StyledRadio(props) {\n    const classes = useStyles();\n  \n    return (\n      <Radio\n        className={classes.root}\n        disableRipple\n        color=\"default\"\n        checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\n        icon={<span className={classes.icon} />}\n        {...props}\n      />\n    );\n  }\n\nconst RadioVote = ({votedTable, isVoted, value, votes, handleChange, maxVotes}) => {\n    const classes = useStyles();\n    const getLabel =(label, counter)=> (\n        <Box>\n            <Box sx={{display: 'flex', justifyContent: 'space-between'}}>\n                <span>{label} &nbsp;</span>\n                <span style={{color: colors.pricing}}> {counter}</span>\n            </Box>\n            <Box>\n                <ProgressBar max={maxVotes===0 ? 1 : maxVotes} counter={counter} />\n            </Box>\n        </Box>\n    )\n    \n    return (\n      <FormControl component=\"fieldset\" className={classes.fieldset}>\n        <RadioGroup aria-label=\"pollCounter\" name=\"pollCounter\" value={value} onChange={handleChange} className={classes.radioGroup}>\n          {\n            votedTable?.map(item => (\n                <FormControlLabel \n                    key={item[0]} \n                    value={item[0]} \n                    control={<StyledRadio />} \n                    label={getLabel(item[1], item[2])} \n                    checked={isVoted.status && isVoted?.answer === parseInt(item[0])}\n                />\n                ))\n          }\n        </RadioGroup>\n      </FormControl>\n    );\n}\n\nexport default RadioVote","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/VotePoll/ProgressBar/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/DrawerBoard/index.js",["205","206"],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\n\nconst useStyles = makeStyles({\n  \n});\n\nexport default function DrawerBoard({toggleDrawer, open, content}) {\n  const classes = useStyles();\n  return (\n    <div>\n          <SwipeableDrawer\n            anchor={'right'}\n            open={open}\n            onClose={toggleDrawer(false)}\n            onOpen={toggleDrawer(true)}\n          >\n            {content('right')}\n          </SwipeableDrawer>\n    </div>\n  );\n}\n","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/ListBoard/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/reducers/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/reducers/room.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/reducers/user.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/actions/types.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/actions/room.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/actions/user.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/context/intialState/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/views/Chat.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Copyright/index.js",[],"/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/views/CreateRoom.js",["207"],"import { Avatar, Box, Button, Container, CssBaseline, TextField, Typography, makeStyles } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport \nLockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Copyright from '../components/shared/Copyright';\nimport { colors } from '../assets/styles/colors';\nimport { useStore } from '../context';\nimport { setUserName } from '../context/actions/user';\nimport { SET_ROOM_NAME, SET_USER_NAME } from '../context/actions/types';\nimport { useNavigate } from 'react-router-dom';\nimport { setRoomName } from '../context/actions/room';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n      marginTop:\n       theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: colors.primary,\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(1),\n    },\n    submit: {\n      margin: theme.spacing(3, 0, 2),\n      padding: theme.spacing(1)\n    },\n  }));\n\nconst initialState = {\n    roomName: JSON.parse(localStorage.getItem(\"sariska-chat-room\"))?.session_id || '',\n    userName: JSON.parse(localStorage.getItem(\"sariska-chat-user\"))?.name || '',\n    error: ''\n}\n\nconst CreateRoom = () => {\n    const classes = useStyles();\n    const [state, setState] = useState(initialState);\n    const { dispatch } = useStore();\n    const navigate = useNavigate();\n    \n    const handleChange = (e) => {\n        const {name, value} = e.target;\n        setState(state => ({...state, [name]: value}));\n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(!state.roomName && !state.userName) {\n          setState(state => ({...state, ['error']: 'Required fields can not be kept blank'}))\n          return;\n        }\n        if(JSON.parse(localStorage.getItem('sariska-chat-roomName')) !== state.roomName){\n          dispatch(setRoomName(SET_ROOM_NAME, state.roomName));\n        }\n        if(JSON.parse(localStorage.getItem('sariska-chat-userName')) !== state.userName){\n          dispatch(setUserName(SET_USER_NAME, state.userName));\n        }\n        navigate('/chat');\n    }\n\n    useEffect(()=>{\n      setState(state => ({\n        ...state, \n        roomName: JSON.parse(localStorage.getItem(\"sariska-chat-room\"))?.session_id || '',\n        userName: JSON.parse(localStorage.getItem(\"sariska-chat-user\"))?.name || ''\n      }))\n    },[])\n\n  return (\n    <Box sx={{width: '100%', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n        <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Create Room\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Room Name\"\n            name=\"roomName\"\n            value={state.roomName}\n            onChange={handleChange}\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"userName\"\n            label=\"Username\"\n            value={state.userName}\n            onChange={handleChange}\n          />\n          {state.error ? <Typography style={{color: 'red', textAlign: 'left'}}>( * ) {state.error}</Typography> : null }\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleSubmit}\n          >\n            Start Chat\n          </Button>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n    </Box>\n  )\n}\n\nexport default CreateRoom","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/BackdropLoader/index.js",["208"],"import React from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n}));\n\nexport default function BackdropLoader({open}) {\n  const classes = useStyles();\n  //const [open, setOpen] = React.useState(false);\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n//   const handleToggle = () => {\n//     setOpen(!open);\n//   };\n\n  return (\n    <div>\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleToggle}>\n        Show backdrop\n      </Button> */}\n      <Backdrop className={classes.backdrop} open={open}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </div>\n  );\n}\n","/Users/gurudeep/Documents/work/sariska/sariska-chat-react/src/components/shared/Poll/VotePoll/PollResult/index.js",[],{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":27,"column":8,"nodeType":"215","endLine":27,"endColumn":18,"suggestions":"216"},{"ruleId":"217","severity":1,"message":"218","line":1,"column":33,"nodeType":"219","messageId":"220","endLine":1,"endColumn":39},{"ruleId":"213","severity":1,"message":"221","line":20,"column":8,"nodeType":"215","endLine":20,"endColumn":16,"suggestions":"222"},{"ruleId":"213","severity":1,"message":"223","line":19,"column":8,"nodeType":"215","endLine":19,"endColumn":24,"suggestions":"224"},{"ruleId":"217","severity":1,"message":"225","line":2,"column":8,"nodeType":"219","messageId":"220","endLine":2,"endColumn":19},{"ruleId":"217","severity":1,"message":"226","line":4,"column":8,"nodeType":"219","messageId":"220","endLine":4,"endColumn":14},{"ruleId":"217","severity":1,"message":"227","line":5,"column":8,"nodeType":"219","messageId":"220","endLine":5,"endColumn":15},{"ruleId":"217","severity":1,"message":"228","line":6,"column":8,"nodeType":"219","messageId":"220","endLine":6,"endColumn":18},{"ruleId":"217","severity":1,"message":"229","line":7,"column":8,"nodeType":"219","messageId":"220","endLine":7,"endColumn":14},{"ruleId":"217","severity":1,"message":"230","line":8,"column":8,"nodeType":"219","messageId":"220","endLine":8,"endColumn":18},{"ruleId":"217","severity":1,"message":"231","line":9,"column":8,"nodeType":"219","messageId":"220","endLine":9,"endColumn":16},{"ruleId":"217","severity":1,"message":"232","line":10,"column":10,"nodeType":"219","messageId":"220","endLine":10,"endColumn":22},{"ruleId":"217","severity":1,"message":"233","line":87,"column":9,"nodeType":"219","messageId":"220","endLine":87,"endColumn":18},{"ruleId":"217","severity":1,"message":"234","line":163,"column":19,"nodeType":"219","messageId":"220","endLine":163,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":276,"column":33,"nodeType":"237","messageId":"238","endLine":276,"endColumn":35},{"ruleId":"217","severity":1,"message":"239","line":38,"column":11,"nodeType":"219","messageId":"220","endLine":38,"endColumn":26},{"ruleId":"217","severity":1,"message":"240","line":1,"column":17,"nodeType":"219","messageId":"220","endLine":1,"endColumn":25},{"ruleId":"217","severity":1,"message":"241","line":1,"column":10,"nodeType":"219","messageId":"220","endLine":1,"endColumn":24},{"ruleId":"217","severity":1,"message":"242","line":3,"column":8,"nodeType":"219","messageId":"220","endLine":3,"endColumn":28},{"ruleId":"217","severity":1,"message":"243","line":16,"column":11,"nodeType":"219","messageId":"220","endLine":16,"endColumn":28},{"ruleId":"217","severity":1,"message":"244","line":4,"column":3,"nodeType":"219","messageId":"220","endLine":4,"endColumn":7},{"ruleId":"217","severity":1,"message":"245","line":111,"column":14,"nodeType":"219","messageId":"220","endLine":111,"endColumn":18},{"ruleId":"213","severity":1,"message":"246","line":244,"column":6,"nodeType":"215","endLine":244,"endColumn":8,"suggestions":"247"},{"ruleId":"213","severity":1,"message":"246","line":252,"column":6,"nodeType":"215","endLine":252,"endColumn":13,"suggestions":"248"},{"ruleId":"213","severity":1,"message":"249","line":259,"column":6,"nodeType":"215","endLine":259,"endColumn":20,"suggestions":"250"},{"ruleId":"213","severity":1,"message":"251","line":265,"column":5,"nodeType":"215","endLine":265,"endColumn":15,"suggestions":"252"},{"ruleId":"217","severity":1,"message":"228","line":1,"column":65,"nodeType":"219","messageId":"220","endLine":1,"endColumn":75},{"ruleId":"217","severity":1,"message":"253","line":3,"column":17,"nodeType":"219","messageId":"220","endLine":3,"endColumn":26},{"ruleId":"217","severity":1,"message":"240","line":3,"column":28,"nodeType":"219","messageId":"220","endLine":3,"endColumn":36},{"ruleId":"217","severity":1,"message":"254","line":6,"column":10,"nodeType":"219","messageId":"220","endLine":6,"endColumn":18},{"ruleId":"217","severity":1,"message":"255","line":7,"column":10,"nodeType":"219","messageId":"220","endLine":7,"endColumn":17},{"ruleId":"217","severity":1,"message":"256","line":2,"column":8,"nodeType":"219","messageId":"220","endLine":2,"endColumn":12},{"ruleId":"217","severity":1,"message":"257","line":11,"column":9,"nodeType":"219","messageId":"220","endLine":11,"endColumn":16},{"ruleId":"258","severity":1,"message":"259","line":55,"column":41,"nodeType":"260","messageId":"261","endLine":55,"endColumn":91,"fix":"262"},{"ruleId":"217","severity":1,"message":"229","line":4,"column":8,"nodeType":"219","messageId":"220","endLine":4,"endColumn":14},"no-native-reassign",["263"],"no-negated-in-lhs",["264"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'socket' and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["265"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'params' and 'topic'. Either include them or remove the dependency array.",["266"],"React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array. If 'setLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["267"],"'MessageItem' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'COMPANY_LOGO' is defined but never used.","'teraBytes' is assigned a value but never used.","'setCounter' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'compressOptions' is assigned a value but never used.","'useState' is defined but never used.","'InputAdornment' is defined but never used.","'EmojiPickerContainer' is defined but never used.","'handleEmojiPicker' is assigned a value but never used.","'Card' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkIsVoted', 'fetchTotalVotes', 'poll.id', and 'room.session_id'. Either include them or remove the dependency array.",["268"],["269"],"React Hook useEffect has a missing dependency: 'getVotedTable'. Either include it or remove the dependency array.",["270"],"React Hook useEffect has missing dependencies: 'messageId' and 'poll.id'. Either include them or remove the dependency array.",["271"],"'useEffect' is defined but never used.","'useStore' is defined but never used.","'apiCall' is defined but never used.","'clsx' is defined but never used.","'classes' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['error'] found.","Property","unnecessarilyComputedProperty",{"range":"272","text":"273"},"no-global-assign","no-unsafe-negation",{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},[1773,1782],"'error'","Update the dependencies array to be: [socket, userId, userName]",{"range":"288","text":"289"},"Update the dependencies array to be: [params, socket, topic]",{"range":"290","text":"291"},"Update the dependencies array to be: [channel, event, setLoading]",{"range":"292","text":"293"},"Update the dependencies array to be: [checkIsVoted, fetchTotalVotes, poll.id, room.session_id]",{"range":"294","text":"295"},"Update the dependencies array to be: [checkIsVoted, fetchTotalVotes, poll.id, room.session_id, value]",{"range":"296","text":"297"},"Update the dependencies array to be: [getVotedTable, value, votes]",{"range":"298","text":"299"},"Update the dependencies array to be: [messageId, newVotes, poll.id]",{"range":"300","text":"301"},[1137,1147],"[socket, userId, userName]",[703,711],"[params, socket, topic]",[521,537],"[channel, event, setLoading]",[6086,6088],"[checkIsVoted, fetchTotalVotes, poll.id, room.session_id]",[6258,6265],"[checkIsVoted, fetchTotalVotes, poll.id, room.session_id, value]",[6377,6391],"[getVotedTable, value, votes]",[6484,6494],"[messageId, newVotes, poll.id]"]